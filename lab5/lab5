from dataclasses import dataclass, field
from typing import Protocol, Sequence, Optional, TypeVar, Generic, Dict, Any
import json
import os
import logging
from logging import Logger

# Настройка логирования
logging.basicConfig(level=logging.INFO)
logger: Logger = logging.getLogger(__name__)

T = TypeVar('T')

@dataclass(order=True)
class User:
    sort_index: int = field(init=False, repr=False)
    id: int
    name: str
    login: str
    password: str = field(repr=False)
    email: Optional[str] = None
    address: Optional[str] = None

    def __post_init__(self):
        self.sort_index = hash(self.name)


class DataRepositoryProtocol(Protocol[T]):
    def get_all(self) -> Sequence[T]: ...
    def get_by_id(self, id: int) -> Optional[T]: ...
    def add(self, item: T) -> bool: ...  # Возвращает успех операции
    def update(self, item: T) -> bool: ...
    def delete(self, item: T) -> bool: ...


class UserRepositoryProtocol(DataRepositoryProtocol[User], Protocol):
    def get_by_login(self, login: str) -> Optional[User]: ...


class DataRepository(Generic[T]):
    def __init__(self, filename: str, from_dict: Any):
        self.filename = filename
        self.from_dict = from_dict
        self._items: Dict[int, T] = {}
        self._load()

    def _load(self) -> None:
        "Загружает данные из файла, обрабатывает ошибки"
        try:
            if not os.path.exists(self.filename):
                logger.warning(f"File {self.filename} not found. Starting with empty repository.")
                return

            with open(self.filename, "r") as f:
                data = json.load(f)
                for item_data in data:
                    item_data.pop("sort_index", None)  # Удаляем служебное поле
                    self._items[item_data["id"]] = self.from_dict(item_data)

        except json.JSONDecodeError:
            logger.error(f"Invalid JSON in {self.filename}. Data may be corrupted.")
            raise
        except Exception as e:
            logger.error(f"Failed to load data from {self.filename}: {e}")
            raise

    def _save(self) -> bool:
        "Сохраняет данные в файл. Возвращает True при успехе"
        try:
            with open(self.filename, "w") as f:
                items_to_save = [vars(item).copy() for item in self._items.values()]
                for item in items_to_save:
                    item.pop("sort_index", None)  # Не сохраняем sort_index
                json.dump(items_to_save, f, indent=2)
            return True
        except Exception as e:
            logger.error(f"Failed to save data to {self.filename}: {e}")
            return False

    def get_all(self) -> Sequence[T]:
        return list(self._items.values())

    def get_by_id(self, id: int) -> Optional[T]:
        return self._items.get(id)

    def add(self, item: T) -> bool:
        if not hasattr(item, "id"):
            logger.error("Item must have 'id' attribute.")
            return False

        self._items[item.id] = item
        return self._save()

    def update(self, item: T) -> bool:
        if item.id not in self._items:
            logger.error(f"Item with id {item.id} not found.")
            return False

        self._items[item.id] = item
        return self._save()

    def delete(self, item: T) -> bool:
        if item.id not in self._items:
            logger.error(f"Item with id {item.id} not found.")
            return False

        del self._items[item.id]
        return self._save()


class UserRepository(DataRepository[User], UserRepositoryProtocol):
    def __init__(self, filename: str = "users.json"):
        super().__init__(filename, lambda d: User(**d))

    def get_by_login(self, login: str) -> Optional[User]:
        return next((user for user in self.get_all() if user.login == login), None)


class AuthServiceProtocol(Protocol):
    def sign_in(self, user: User) -> bool: ...
    def sign_out(self) -> bool: ...
    @property
    def is_authorized(self) -> bool: ...
    @property
    def current_user(self) -> Optional[User]: ...


class AuthService(AuthServiceProtocol):
    def __init__(self, user_repo: UserRepositoryProtocol, auth_file: str = "auth.json"):
        self.user_repo = user_repo
        self.auth_file = auth_file
        self._current_user: Optional[User] = None
        self._auto_sign_in()

    def _auto_sign_in(self) -> None:
        "Пытается автоматически авторизовать пользователя из auth.json."
        try:
            if not os.path.exists(self.auth_file):
                return

            with open(self.auth_file, "r") as f:
                data = json.load(f)
                user_id = data.get("user_id")
                if user_id is None:
                    logger.warning("auth.json does not contain 'user_id'.")
                    return

                user = self.user_repo.get_by_id(user_id)
                if user:
                    self._current_user = user
                    logger.info(f"Auto-signed in as {user.login}")

        except json.JSONDecodeError:
            logger.error("auth.json contains invalid JSON.")
        except Exception as e:
            logger.error(f"Failed to auto-sign-in: {e}")

    def sign_in(self, user: User) -> bool:
        "Авторизует пользователя и сохраняет его ID в auth.json."
        try:
            with open(self.auth_file, "w") as f:
                json.dump({"user_id": user.id}, f, indent=2)

            self._current_user = user
            logger.info(f"Signed in as {user.login}")
            return True
        except Exception as e:
            logger.error(f"Sign-in failed: {e}")
            return False

    def sign_out(self) -> bool:
        "Выход из системы. Удаляет auth.json."
        try:
            if os.path.exists(self.auth_file):
                os.remove(self.auth_file)
            self._current_user = None
            logger.info("Signed out successfully.")
            return True
        except Exception as e:
            logger.error(f"Sign-out failed: {e}")
            return False

    @property
    def is_authorized(self) -> bool:
        return self._current_user is not None

    @property
    def current_user(self) -> Optional[User]:
        return self._current_user


def demo():
    "Демонстрация работы системы."
    user_repo = UserRepository()
    auth_service = AuthService(user_repo)

    # Создаем пользователей
    user1 = User(id=1, name="Alice", login="alice", password="pass123", email="alice@example.com")
    user2 = User(id=2, name="Bob", login="bob", password="pass456", address="Moscow")

    # Добавляем в репозиторий
    user_repo.add(user1)
    user_repo.add(user2)

    # Выводим всех пользователей (отсортированных по name)
    print("All users:")
    for user in sorted(user_repo.get_all()):
        print(f"ID: {user.id}, Name: {user.name}, Login: {user.login}")

    # Авторизация
    print("\nSigning in as Alice...")
    auth_service.sign_in(user1)
    print(f"Is authorized: {auth_service.is_authorized}")
    print(f"Current user: {auth_service.current_user.name if auth_service.current_user else 'None'}")

    # Смена пользователя
    print("\nSigning in as Bob...")
    auth_service.sign_in(user2)
    print(f"Current user: {auth_service.current_user.name if auth_service.current_user else 'None'}")

    # Выход
    print("\nSigning out...")
    auth_service.sign_out()
    print(f"Is authorized: {auth_service.is_authorized}")

    # Проверка авто-авторизации после "перезагрузки"
    print("\nCreating new auth service to simulate restart...")
    new_auth_service = AuthService(user_repo)
    print(f"Auto-signed in as: {new_auth_service.current_user.name if new_auth_service.current_user else 'None'}")


if __name__ == "__main__":
    demo()
